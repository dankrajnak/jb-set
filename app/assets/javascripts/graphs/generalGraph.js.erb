/*
 * Created by danielkrajnak on 6/07/17.
 */
(function (global) {
	"use strict";

	var graph = global.graph;
	if (!graph) {
		graph = {};
		global.graph = graph;
	}

	var graphs = graph.graphs;
	if (!graphs) {
		graphs = {}
		graph.graphs = graphs;
	}

	var module = graphs.generalGraph = {};

	var width = $("#graph-row").width();
	var height = window.innerHeight * .7;

	//Private members
	var margin = {
		top: 20,
		right: 30,
		bottom: 30,
		left: 40
	};

	var oldQuestionType = '';
	var oldGraph = '';

	module.animationDuration = 700;

	var hideGraph = function (graph) {
		graph.classed("fadeOut", true);
		setTimeout(function () {
			graph.style('display', 'none');
		}, module.animationDuration)
	}

	var showGraph = function (graph) {
		d3.select(".general-graph").style("display", "none");
		graph.style('display', "block");
		graph.classed("fadeOut", false);
	}


	var drawGraph = function (questionInfo) {
		if (!questionInfo) return;

		var questionID = questionInfo.split(',')[0];
		var questionType = questionInfo.split(',')[1];
		var graphModule, graph;

		switch (questionType) {
			case 'n':
				graphModule = module.number;
				graph = d3.select("#general-graph-number");
				break;
			case 'mc':
				graphModule = module.multipleChoice;
				graph = d3.select("#general-graph-multiple-choice");
				break;
			case 'sr':
				graphModule = module.shortResponse;
				graph = d3.select("#general-graph-short-response");
				break;
			case 'lr':
				graphModule = module.longResponse;
				graph = d3.select("#general-graph-long-response");
				break;
			case 'tf':
				graphModule = module.trueFalse;
				graph = d3.select("#general-graph-true-false");
				break;
			case 'yn':
				graphModule = module.yesNo;
				graph = d3.select("#general-graph-yes-no");
				break;
			default:
				graphModule = module.longResponse;
				graph = d3.select("#general-graph-long-response");
				break;
		}

		d3.json('/questions/' + questionID + '.json', function (error, question) {
			if (error) throw error;

			//Draw appropriate graph
			if (graphModule && graphModule.draw) {
				graphModule.draw(graph, question);
			}
			oldGraph = graph;
			oldQuestionType = questionType;
		});

		//Transistion graphs out and in if the type of question changes
		if (oldQuestionType !== questionType) {
			if (oldGraph) {
				hideGraph(oldGraph);

				setTimeout(function () {
					showGraph(graph);
				}, module.animationDuration);
			} else {
				showGraph(graph);
			}
		}
	}

	var populateQuestions = function (survey) {
		d3.json("/surveys/" + encodeURI(survey.trim()) + ".json", function (error, survey) {
			if (error) throw error;

			//Remove current questions 
			$('#general-graph-question-select option').remove();

			//Add new quesitons
			survey.questions.forEach(function (q) {
				//Format multiple choice questions
				var name = (q.qtype === 'mc') ? q.name.split('[CHOICES]')[0] : q.name;
				//Disable headers
				var disabled = (q.qtype === 'h') ? "class=\"general-graph-header-option\" disabled" : '';
				$('#general-graph-question-select').append("<option value = \"" + q.id + ',' + q.qtype + "\" " + disabled + "> " + name + "</option>");
			});

			var questionSelected = $('#general-graph-question-select option').filter(":selected").val();
			drawGraph(questionSelected);

		});
	}

	var handler = function (error, surveys) {
		if (error) throw error;

		// Populate survey select
		surveys.forEach(function (survey) {
			$('#general-graph-select').append("<option value = \"" + survey.name + "\"> " + survey.name + "</option>");
		});
		var surveySelected = $('#general-graph-select option').filter(":selected").text();

		// Populate Question Select and Draw Graph
		populateQuestions(surveySelected);

		//Listen for change in survey
		$('#general-graph-select').change(function () {
			populateQuestions($('#general-graph-select option').filter(':selected').text())
		});

		//Listen for change in question
		$('#general-graph-question-select').change(function () {
			drawGraph($('#general-graph-question-select option').filter(':selected').val())
		});
	}

	//Draw function
	module.draw = function (graphWidth, graphHeight, graphMargins) {
		width = graphWidth ? graphWidth : width;
		height = graphHeight ? graphHeight : height;
		margin = graphMargins ? graphMargins : margin;

		width -= margin.left + margin.right;
		height -= margin.top + margin.bottom;

		module.width = width;
		module.height = height;
		module.margin = margin;

		d3.json('/surveys.json', handler);
	}


})(this);
