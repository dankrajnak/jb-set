/**
 * Created by danielkrajnak on 4/20/17.
 */

//Temporary global variable which I'll erase I promise
jbcountries = [];
jbregions = [];

function GeneralGraph(width, height, margin) {

	var margin = (typeof margin === 'undefined') ? {
		top: 20,
		right: 30,
		bottom: 30,
		left: 40
	} : margin;
	var width = (typeof width === 'undefined') ? $("#graph-row").width() : width;
	var height = (typeof height === 'undefined') ? window.innerHeight / 2 : height;

	width -= margin.left + margin.right;
	height -= margin.top + margin.bottom;


	this.graph = d3.select("#general-graph").attr("height", height + margin.top + margin.bottom).attr("width", width + margin.left + margin.right);

	var questionsData = [];

	queue()
		.defer(d3.tsv, "<%= image_url('jb-countries.tsv') %>")
		.defer(d3.tsv, "<%= image_url('jb-regions.tsv') %>")
		.defer(d3.json, "/surveys.json")
		.await(ready);

	function ready(error, countries, regions, surveys) {
		jbcountries = countries;
		jbregions = regions;
		if (error) throw error;

		surveys.forEach(function (e) {
			$('#general-graph-select').append("<option value = \"" + e.name + "\"> " + e.name + "</option>");
		});
		var selected = $('#general-graph-select option').filter(":selected");


		d3.json("/surveys/" + encodeURI(selected.text().trim()) + ".json", function (error, survey) {
			if (error) throw error;

			$('#general-graph-question-select option').remove();
			survey.questions.forEach(function (q) {
				var name = (q.qtype === 'mc') ? q.name.split('[CHOICES]')[0] : q.name;
				var disabled = (q.qtype === 'h') ? "class=\"general-graph-header-option\" disabled" : '';
				$('#general-graph-question-select').append("<option value = \"" + q.id + "\" " + disabled + "> " + name + "</option>");
			});

			drawGraph(graph, $('#general-graph-select').find(":selected").text(), width, height, margin);
		});

		$('#general-graph-select').change(function () {
			selected = $('#general-graph-select option').filter(":selected");

			d3.json("/surveys/" + encodeURI(selected.text().trim()) + ".json", function (error, data) {
				if (error) throw error;

				$('#general-graph-question-select option').remove();
				data.questions.forEach(function (q) {
					var name = (q.qtype === 'mc') ? q.name.split('[CHOICES]')[0] : q.name;
					var disabled = (q.qtype === 'h') ? "class=\"general-graph-header-option\" disabled" : '';
					$('#general-graph-question-select').append("<option value = \"" + q.id + "\" " + disabled + "> " + name + "</option>");
				});

				drawGraph(this.graph, $('#general-graph-select').find(":selected").text(), width, height, margin);
			});
		});

		$('#general-graph-question-select').change(function () {
			var selected = parseInt($('#general-graph-question-select option').filter(":selected").val());
			d3.json('/questions/' + selected + '.json', function (error, question) {
				if (error) throw error;
				console.log(question);
				drawGraph(this.graph, question, width, height, margin);
			});

		});
	}
}

function drawGraph(chart, question, width, height, margin) {
	switch (question.type) {
		case 'n':
			var g = chart.append("g")
				.attr("transform", "translate(" + margin.left + "," + margin.top + ")");
			var y = d3.scaleLinear().range([height, 0]);
			var x = d3.scaleBand().range([0, width]).paddingInner(0.01);



			var xAxis = d3.axisBottom().scale(x);
			var yAxis = d3.axisLeft().scale(y);

			/*---		Dependent on data		---*/

			y.domain([0, d3.max(question.answers, function (d) {
				return +d.answer; //coerce to number
			})]);

			console.log(d3.max(question.answers, function (d) {
				return d.answer;
			}))
			console.log(question.answers);

			//attach regions to answers.  Ugh, there's a better way to do this.
			question.answers.forEach(function (a) {
				a.region = jbregions.find(function (region) {
					return (jbcountries.find(function (country) {
						return (country.name === a.country);
					}).region === region.id);
				})
			});



			//sort countries alphabetically, then by region
			x.domain(question.answers.sort(function (a, b) {
				if (+a.region.id === +b.region.id) {
					return a.country.localeCompare(b.country);
				}
				return +a.region.id - b.region.id;
			}).map(function (c) {
				return c.country;
			}));

			g.append("g").attr("class", "x-axis")
				.attr("transform", "translate(0," + height + ")")
				.call(xAxis);

			g.append("g")
				.attr("class", "y-axis")
				.call(yAxis);

			g.selectAll(".bar")
				.data(question.answers)
				.enter().append("rect")
				.attr("transform", function (d) {
					return "translate(" + x(d.country) + ")";
				}).attr("class", function (d) {
					return "bar " + d.region.abbreviation
				})
				.attr("x", function (d) {
					return x(d.name);
				})
				.attr("y", function (d) {
					return y(d.answer);
				})
				.attr("height", function (d) {
					return height - y(+d.answer);
				})
				.attr("width", x.bandwidth());
			/*
			-------------------------------------
			*/

			break;
		default:
			break;
	}
}

//GeneralGraph();
